var documenterSearchIndex = {"docs":
[{"location":"documentation/SpectralDensities/#Spectral-Densities","page":"Spectral Densities","title":"Spectral Densities","text":"","category":"section"},{"location":"documentation/SpectralDensities/","page":"Spectral Densities","title":"Spectral Densities","text":"The interaction of a quantum system with a condensed phase environment is often captured through the spectral density. QuantumDynamics has a built-in support for a few of the most common spectral densities and allows for easy incorporation of other spectral densities.","category":"page"},{"location":"documentation/SpectralDensities/#API","page":"Spectral Densities","title":"API","text":"","category":"section"},{"location":"documentation/SpectralDensities/","page":"Spectral Densities","title":"Spectral Densities","text":"SpectralDensities","category":"page"},{"location":"documentation/SpectralDensities/#QuantumDynamics.SpectralDensities","page":"Spectral Densities","title":"QuantumDynamics.SpectralDensities","text":"Collection of spectral densities commonly used to describe solvents.\n\n\n\n\n\n","category":"module"},{"location":"documentation/SpectralDensities/","page":"Spectral Densities","title":"Spectral Densities","text":"SpectralDensities.ExponentialCutoff","category":"page"},{"location":"documentation/SpectralDensities/#QuantumDynamics.SpectralDensities.ExponentialCutoff","page":"Spectral Densities","title":"QuantumDynamics.SpectralDensities.ExponentialCutoff","text":"ExponentialCutoff(; ξ, ωc, n=1.0, Δs=2.0)\n\nConstruct a model spectral density with an exponential cutoff.\n\nJ(ω) = frac2πΔs^2 ξ fracω^nω_c^n-1 expleft(-fracωωcright)\n\nwhere Δs is the distance between the two system states. The model is Ohmic if n = 1, sub-Ohmic if n < 1, and super-Ohmic if n > 1.\n\n\n\n\n\n","category":"type"},{"location":"documentation/SpectralDensities/","page":"Spectral Densities","title":"Spectral Densities","text":"SpectralDensities.DrudeLorentzCutoff","category":"page"},{"location":"documentation/SpectralDensities/#QuantumDynamics.SpectralDensities.DrudeLorentzCutoff","page":"Spectral Densities","title":"QuantumDynamics.SpectralDensities.DrudeLorentzCutoff","text":"DrudeLorentzCutoff(; λ, γ, n=1.0, Δs=2.0)\n\nConstruct a model spectral density with a Drude-Lorentz cutoff.\n\nJ(ω) = frac2λΔs^2 fracω^n γ^2-nω^2 + γ^2\n\nwhere Δs is the distance between the two system states. The model is Ohmic if n = 1, sub-Ohmic if n < 1, and super-Ohmic if n > 1.\n\n\n\n\n\n","category":"type"},{"location":"tutorial/QuAPI/#Quasi-Adiabatic-Propagator-Path-Integral","page":"QuAPI","title":"Quasi-Adiabatic Propagator Path Integral","text":"","category":"section"},{"location":"tutorial/QuAPI/","page":"QuAPI","title":"QuAPI","text":"Quasi-Adiabatic Propagator Path Integral (QuAPI) is one of the foundational numerically exact techniques for simulating a quantum system interacting with a harmonic environment. It simulates the reduced density matrix of an n-level quantum system using path integrals and the harmonic bath is incorporated through the Feynman-Vernon influence functional. The tracing out of the harmonic bath leads to a non-Markovian memory, which is used as a convergence parameter.","category":"page"},{"location":"tutorial/QuAPI/#Using-the-QuAPI-module-of-QuantumDynamics","page":"QuAPI","title":"Using the QuAPI module of QuantumDynamics","text":"","category":"section"},{"location":"tutorial/QuAPI/","page":"QuAPI","title":"QuAPI","text":"To use the QuAPI model, one needs to first set up the system and the harmonic bath. Suppose we are simulating a classical spin-boson Hamiltonian, then the system Hamiltonian is given as","category":"page"},{"location":"tutorial/QuAPI/","page":"QuAPI","title":"QuAPI","text":"H0 = [0.0 -1.0; -1.0 0.0]","category":"page"},{"location":"tutorial/QuAPI/","page":"QuAPI","title":"QuAPI","text":"and the solvent Hamiltonian is described by a spectral density chosen here to be the Ohmic spectral density with an exponential cutoff held at an inverse temperature \\beta = 5.0:","category":"page"},{"location":"tutorial/QuAPI/","page":"QuAPI","title":"QuAPI","text":"using QuantumDynamics\nJw = SpectralDensities.ExponentialCutoff(ξ=0.1, ωc=7.5)\nβ = 5.0","category":"page"},{"location":"tutorial/QuAPI/","page":"QuAPI","title":"QuAPI","text":"With the main system having been specified, we need to pick a proper time-step, which is a convergence parameter.","category":"page"},{"location":"tutorial/QuAPI/","page":"QuAPI","title":"QuAPI","text":"dt = 0.25\nntimes = 100\ntime = 0:dt:dt*ntimes;","category":"page"},{"location":"tutorial/QuAPI/","page":"QuAPI","title":"QuAPI","text":"We simulate the dynamics for a sequence of increasing non-Markovian memory lengths, kmax:","category":"page"},{"location":"tutorial/QuAPI/","page":"QuAPI","title":"QuAPI","text":"ρ0 = [1.0 0; 0 0]\nsigma_z = []\nkmax = 1:2:9\nfor k in kmax\n    ρs = QuAPI.propagate(; Hamiltonian=H0, Jw, β, ρ0, dt, ntimes, kmax=k)\n    push!(sigma_z, real(ρs[1,1,:] - ρs[2,2,:]))\nend","category":"page"},{"location":"tutorial/QuAPI/","page":"QuAPI","title":"QuAPI","text":"The dynamics can now be simply plotted.","category":"page"},{"location":"tutorial/QuAPI/","page":"QuAPI","title":"QuAPI","text":"using Plots, LaTeXStrings\ncolors = [\"red\" \"green\" \"blue\" \"teal\" \"magenta\"]\nplot(time, sigma_z, lw = 2, label=permutedims([L\"k = %$k\" for k in kmax]), size=(800, 600), seriescolor=colors)\nxlabel!(L\"t\")\nylabel!(L\"\\langle\\sigma_z(t)\\rangle\")","category":"page"},{"location":"documentation/EtaCoefficients/#η-Coefficients","page":"Eta Coefficients","title":"η-Coefficients","text":"","category":"section"},{"location":"documentation/EtaCoefficients/","page":"Eta Coefficients","title":"Eta Coefficients","text":"The η-coefficients are discretizations of the bath correlation function required for simulations using the QuAPI influence functionals. QuantumDynamics provides facilities for generating these coefficients and storing them in a way that utilizes the limited time-translational symmetry that they demonstrate. ","category":"page"},{"location":"documentation/EtaCoefficients/#API","page":"Eta Coefficients","title":"API","text":"","category":"section"},{"location":"documentation/EtaCoefficients/","page":"Eta Coefficients","title":"Eta Coefficients","text":"EtaCoefficients.EtaCoeffs","category":"page"},{"location":"documentation/EtaCoefficients/#QuantumDynamics.EtaCoefficients.EtaCoeffs","page":"Eta Coefficients","title":"QuantumDynamics.EtaCoefficients.EtaCoeffs","text":"EtaCoefficients holds the various discretized η-coefficients required for a QuAPI-based simulation. These are the minimum number of coefficients required, stored using time-translational symmetry wherever possible.\n\nThe values are stored as follows:\n    η00: The self-interaction of the two terminal time points.\n    ηmm: The self-interaction of all intermediate points.\n    η0m: The interaction between a terminal and an intermediate point at different time separations.\n    ηmn: The interaction between two intermediate points at different time separations.\n    η0e: The interaction between the two terminal points at different time separations.\n\n\n\n\n\n","category":"type"},{"location":"documentation/EtaCoefficients/","page":"Eta Coefficients","title":"Eta Coefficients","text":"EtaCoefficients.calculate_η","category":"page"},{"location":"documentation/EtaCoefficients/#QuantumDynamics.EtaCoefficients.calculate_η","page":"Eta Coefficients","title":"QuantumDynamics.EtaCoefficients.calculate_η","text":"calculate_η(specdens<:SpectralDensities.AnalyticalSpectralDensity; β::Real, dt::Real, kmax::Int, classical::Bool=false, discrete::Bool=false)\n\nCalculates the η-coefficients from an analytic spectral density and returns them as an object of the structure EtaCoeffs. The integrations involved are done using trapezoidal integration\n\n\n\n\n\ncalculate_η(specdens<:SpectralDensities.TabularSpectralDensity; β::Real, dt::Real, kmax::Int, classical::Bool=false, discrete::Bool=false)\n\nCalculates the η-coefficients from a discretized set of harmonic modes and returns them as an object of the structure EtaCoeffs. The integrations involved are converted to sums over frequency modes.\n\n\n\n\n\n","category":"function"},{"location":"#Quantum-Dynamics","page":"Introduction","title":"Quantum Dynamics","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Documentation\n[![docs-dev][docsdev-img]][docsdev-url]","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[docsdev-img]: https://img.shields.io/badge/docs-dev-blue.svg [docsdev-url]: https://amartyabose.github.io/QuantumDynamics/dev/","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"QuantumDynamics is an open-source software for the simulation of open quantum systems. Though written with performance in mind, QuantumDynamics provides a high throughput platform for experimentation with state-of-the-art approaches to method development.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The primary problem that QuantumDynamics is aimed at solving is simulation of the dynamics of a relatively small quantum system coupled to a dissipative environment. Such a system-solvent decomposed problem can typically be represented by the Hamiltonian:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"hatH = hatH_0 + hatH_textenv","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"where hatH_0 is the Hamiltonian of the isolated system and hatH_textenv is the Hamiltonian corresponding to the environment and the interaction between the system and the environment.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Under Gaussian response theory, a molecular solvent can be mapped to a bath of harmonic oscillators bi-linearly interacting with the system:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"hatH_textenv = sum_j fracp_j^22 + frac12omega_j^2left(x_j - fracc_jomega_j^2hatsright)^2","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"where hats is the system operator that couples with the bath modes. In such a harmonic mapping, the frequencies, omega_j and the couplings c_j are characterized by the spectral density, which is related to the energy-gap autocorrelation function of the molecular solvent.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"J(omega) = fracpi2 sum_j fracc_j^2omega_jdeltaleft(omega-omega_jright)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The simulations aim at computing the reduced density matrix corresponding to the system. The tracing out of the environment modes leads to temporally non-local interactions and non-Markovian dynamics. The non-Markovian interactions can be computed using the Feynman-Vernon influence functional, which when discretized give rise to the eta-coefficients used in this package.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The QuantumDynamics package has not yet been registered. For the time being, the installation procedure directly uses the github repository. This can either be done by going into the package manager mode for Julia","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"~ julia","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ]\npkg> add https://github.com/amartyabose/QuantumDynamics","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"or by using the Pkg package manager in a script:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Pkg\njulia> Pkg.add(\"https://github.com/amartyabose/QuantumDynamics\")","category":"page"},{"location":"documentation/QuAPI/#Quasi-Adiabatic-Propagator-Path-Integral","page":"QuAPI","title":"Quasi-Adiabatic Propagator Path Integral","text":"","category":"section"},{"location":"documentation/QuAPI/","page":"QuAPI","title":"QuAPI","text":"This module provides the basic interface for simulating a system using QuAPI.","category":"page"},{"location":"documentation/QuAPI/#API","page":"QuAPI","title":"API","text":"","category":"section"},{"location":"documentation/QuAPI/","page":"QuAPI","title":"QuAPI","text":"QuAPI.propagate","category":"page"},{"location":"documentation/QuAPI/#QuantumDynamics.QuAPI.propagate","page":"QuAPI","title":"QuantumDynamics.QuAPI.propagate","text":"propagate(;Hamiltonian, Jw::SpectralDensities.SpectralDensity, β::Real, ρ0, dt::Real, ntimes::Int, kmax::Int, cutoff=0.0, svec=[1.0, -1.0], verbose::Bool=false)\n\nGiven a Hamiltonian, the spectral density describing the solvent and an inverse temperature, this uses QuAPI to propagate the input initial reduced density matrix, ρ0, with a time-step of dt for ntimes time steps. A non-Markovian memory of kmax steps is used in this simulation. \n\n\n\n\n\n","category":"function"},{"location":"documentation/QuAPI/","page":"QuAPI","title":"QuAPI","text":"QuAPI.build_propagator","category":"page"},{"location":"documentation/QuAPI/#QuantumDynamics.QuAPI.build_propagator","page":"QuAPI","title":"QuantumDynamics.QuAPI.build_propagator","text":"build_propagator(;Hamiltonian, Jw::SpectralDensities.SpectralDensity, β::Real, dt::Real, ntimes::Int, cutoff=0.0, svec=[1.0, -1.0], verbose::Bool=false)\n\nBuilds the propagators, augmented with the influence of the harmonic bath defined by the spectral density Jw,  upto ntimes time-steps without iteration. The paths are generated in full forward-backward space but not stored. So, while the space requirement is minimal and constant, the time complexity for each time-step grows by an additional factor of d^2, where d is the dimensionality of the system.\n\n\n\n\n\n","category":"function"}]
}
